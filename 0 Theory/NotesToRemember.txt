margin: 20px; This means it will have margin right,left,top,bottom.
margin-top/(left,right,bottom): 20px; This means it will have margin to one direction.
margin: 20px 50px; This means it will have margin right-left 20px and then top-bottom 50px.
margin: 50px 50px 50px 50px; It will have an especific margin to right,left,top,bottom.
***********************************WE CAN DO THE SAME WITH PADDING****************************
***************************************DIFERENCE BETWEEN MARGIN/PADDING***********************
    * Property margin is for separate the element
    * Property padding is To increase internal space
******************************FORMAT YOUR PAGE************************************************
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: sans-serif;
****************************************FLEXBOX***********************************************
    flex-direction: column; -> Tt represents the elements from top to bottom
    flex-direction: row; -> It represents the elements in a only line
    flex-direction: column-reverse; ->It's the same as flex-direction: column but reversed
    flex-direction: row-reverse; ->It's the same as flex-direction: row but reversed
    
    justify-content: start;                               align-items: start  
    justify-content: center; -> these are vertical        align-items: center  -> these are horizontal 
    justify-content: end;                                align-items: end  

    height: 100vh It takes your screen height
    flex-wrap: wrap; It makes that if your elements does not have a place it will take a place in other row
    gap: Explicitly controls the space between flex items.

    flex: When we declare flex, we are referencing 3 things, it applies to the item not the container
    *flex-grow:  The CSS property flex-grow specifies the growth factor of a flex element
    *flex-shrink: The flex-shrink CSS property specifies the shrinkage factor of a flex item.
    *flex-basis: The flex-basis CSS property tells us that an element will take up the amount of space allocated,
     otherwise it will take up as much space as possible.
****************************************POSITIONS**********************************************
    position: fixed; -> It helps you to have your item in a specific place
    *We use left,right,top,bottom to move our item positioned

    position: relative; -> it helps you to have your item in a specific place but it didnt move with the scroll
    *We use left,right,top,bottom to move our item positioned

    position: absolute; -> It takes the reference from the father and then moves from there
    *It needs to have a father positioned or it will take the super father positioned
    *We use left,right,top,bottom to move our item positioned
******************************************AFTER AND BEFORE****************************************
    *We use these elements for aesthetic issues
    *After means: after content
    *Before means: before content
*********************************************SASS*************************************************
    *Automatically generate style sheets
    *It has properties that css doesn't
******************************SOURCES*********************************************************
    *FLEXBOX: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    *JUST COLOR PICKER -> We can know what colors we have on the screen with this tool
    *GOOGLE ICONS -> https://developers.google.com/fonts/docs/material_icons?hl=es-419
    *******************************MENTAL NOTES*****************************************************
    *Arrange your css by hierarchies